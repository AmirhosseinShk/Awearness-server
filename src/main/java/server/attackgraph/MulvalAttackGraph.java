package server.attackgraph;

import server.attackgraph.fact.Fact;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.input.SAXBuilder;

import java.io.FileInputStream;
import java.util.List;

public class MulvalAttackGraph extends AttackGraph implements Cloneable {

    /**
     * The path to the XML of the attack graph
     */
    public String xmlFilePath = "";

    public MulvalAttackGraph() {

    }

    /**
     * Create an attack graph from an output xml file from Mulval
     *
     * @param xmlPath The path to the xml file
     * @throws Exception
     */
    public MulvalAttackGraph(String xmlPath) throws Exception {
        this.loadFromFile(xmlPath);
    }

    /**
     * Load the attack graph from the XML file generated by MulVAL
     *
     * @param xmlPath the path of the XML file
     * @throws Exception
     */
    public void loadFromFile(String xmlPath) throws Exception {
        this.xmlFilePath = xmlPath;
        FileInputStream file = new FileInputStream(xmlPath);

        SAXBuilder sxb = new SAXBuilder();
        Document document = sxb.build(file);
        Element root = document.getRootElement();

        addArcsAndVerticesFromDomElement(root);

    }

    /**
     * Create the attack graph from the XML DOM element
     *
     * @param root
     */
    public void addArcsAndVerticesFromDomElement(Element root) {
        if (root == null) {
            return;
        }

        //Add all vertices 
        Element vertices_element = root.getChild("vertices");
        if (vertices_element != null) {
            List<Element> vertices = vertices_element.getChildren("vertex");
            for (Element vertex_element : vertices) { //All arcs
                Element id_element = vertex_element.getChild("id");
                if (id_element != null && Integer.parseInt(id_element.getText()) > 0) {
                    int id_vertex = Integer.parseInt(id_element.getText());
                    Vertex vertex = getExistingOrCreateVertex(id_vertex);
                    Element fact_element = vertex_element.getChild("fact");
                    if (fact_element != null) {
                        vertex.fact = new Fact(fact_element.getText(), vertex);
                    }

                    Element metric_element = vertex_element.getChild("metric");
                    if (metric_element != null) {
                        vertex.mulvalMetric = Float.parseFloat(metric_element.getText());
                    }

                    Element type_element = vertex_element.getChild("type");
                    if (type_element != null) {
                        vertex.setType(type_element.getText());
                    }
                }
            }
        }

        // Add all arcs 
        Element arcs_element = root.getChild("arcs");
        if (arcs_element != null) {
            List<Element> arcs = arcs_element.getChildren("arc");
            for (Element arc_element : arcs) { //All arcs
                Element src_element = arc_element.getChild("dst"); //MULVAL XML FILES INVERSE DESTINATION AND DESTINATION
                Element dst_element = arc_element.getChild("src"); //MULVAL XML FILES INVERSE DESTINATION AND DESTINATION
                if (src_element != null && dst_element != null) {
                    Vertex destination = getExistingOrCreateVertex(Integer.parseInt(dst_element.getText()));
                    Vertex source = getExistingOrCreateVertex(Integer.parseInt(src_element.getText()));
                    Arc arc = new Arc(source, destination);
                    this.arcs.add(arc);
                }
            }
        }
    }

    @Override
    public MulvalAttackGraph clone() throws CloneNotSupportedException {
        return (MulvalAttackGraph) super.clone();
    }
}
