package server.vulnerability;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import server.database.Database;
import server.properties.ProjectProperties;


public class UpdateDataBase {

    public static void main(String[] args) {
        UpdateDataBase updateDataBase = new UpdateDataBase();
        updateDataBase.ExtractDataToDataBase("2016");
    }

    public void ExtractDataToDataBase(String year) {
        //JSON parser object to parse read file
        JSONParser jsonParser = new JSONParser();
        String path = ProjectProperties.class.getResource("/DataBaseFiles/" + year + ".json").getPath();
        try (FileReader reader = new FileReader(path)) {
            //Read JSON file
            JSONObject obj = (JSONObject) jsonParser.parse(reader);
            JSONArray items = (JSONArray) obj.get("CVE_Items");
            String itemsNumbers = (String) obj.get("CVE_data_numberOfCVEs");
            ParseDataAndSaveOnDB(items, itemsNumbers);
        } catch (FileNotFoundException e) {
            Logger.getLogger(UpdateDataBase.class.getName()).log(Level.SEVERE, null, e);
        } catch (IOException e) {
            Logger.getLogger(UpdateDataBase.class.getName()).log(Level.SEVERE, null, e);
        } catch (ParseException e) {
            Logger.getLogger(UpdateDataBase.class.getName()).log(Level.SEVERE, null, e);
        } catch (Exception ex) {
            Logger.getLogger(UpdateDataBase.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ParseDataAndSaveOnDB(JSONArray items, String itemsNumbers) throws Exception {
        Database db = getDatabaseConnection();
        for (int i = 0; i < Integer.parseInt(itemsNumbers); i++) {
            JSONObject item = (JSONObject) items.get(i);

            //extract Cvss Data
            JSONObject impactData = (JSONObject) item.get("impact");
            if (!impactData.isEmpty()) {
                CVSS cvss = ParsaImpactData(impactData);
                cvss.addToDatabase(db.getConn());

                //extract Vulnerability Data
                JSONObject cveData = (JSONObject) item.get("cve");
                if (!cveData.isEmpty()) {
                    Vulnerability vulnerability = ParsaCVEData_vul(cveData);
                    vulnerability.cvss.setId(cvss.getId());
                    vulnerability.addToDatabase(db.getConn());
                    
                    //extract cpe data
                    JSONObject configurationsData = (JSONObject) item.get("configurations");
                    if (!configurationsData.isEmpty()) {
                        ArrayList<CPE> cpeList = ParsaConfigurationData(configurationsData);
                        //know we get all Data
                        for(int j=0 ; j < cpeList.size() ; j++){
                            cpeList.get(j).saveToDatabase(db.getConn());
                            vulnerability.addACPEInDatabase(cpeList.get(j), db.getConn());
                        }
                        
                    }
                }
            }
            System.out.println("CVE_" + i + "Update in database");
        }
    }

    private Vulnerability ParsaCVEData_vul(JSONObject cveData) throws Exception {
        JSONObject CVE_data_meta = (JSONObject) cveData.get("CVE_data_meta");
        String cve_id = (String) CVE_data_meta.get("ID");

        JSONObject description = (JSONObject) cveData.get("description");
        JSONArray description_data = (JSONArray) description.get("description_data");
        JSONObject desc = (JSONObject) description_data.get(0);
        String value = (String) desc.get("value");

        Vulnerability vulnerability = new Vulnerability(0, cve_id, value);

        return vulnerability;
    }

    private CWE ParsaCVEData_CWE(JSONObject cveData) {
        JSONObject problemtype = (JSONObject) cveData.get("problemtype");
        JSONArray problemtype_data = (JSONArray) problemtype.get("problemtype_data");
        JSONObject pd = (JSONObject) problemtype_data.get(0);
        JSONObject desc = (JSONObject) pd.get("description");
        String cwe_value = (String) desc.get("value");
        String cwe_description = "";
        if ("NVD-CWE-Other".equals(cwe_value)) {
            JSONObject description = (JSONObject) cveData.get("description");
            JSONArray description_data = (JSONArray) description.get("description_data");
            desc = (JSONObject) description_data.get(1);
            String[] idAndData = ((String) desc.get("value")).split("CWE-");
            String[] splits = idAndData[1].split(":");
            cwe_value = splits[0];
            cwe_description = splits[1];
        }
        CWE cwe = new CWE();
        cwe.id = Integer.getInteger(cwe_value);
        cwe.description = cwe_description;
        return cwe;
    }

    private CVSS ParsaImpactData(JSONObject impactData) {
        JSONObject baseMetricV2 = (JSONObject) impactData.get("baseMetricV2");
        JSONObject cvssV2 = (JSONObject) baseMetricV2.get("cvssV2");
        CVSS cvss = new CVSS();
        String accessComplexity = (String) cvssV2.get("accessComplexity");
        cvss.setAccessComplexity(CVSS.AccessComplexityValues.valueOf(accessComplexity));
        String accessVector = (String) cvssV2.get("accessVector");
        cvss.setAccessVector(CVSS.AccessVectorValues.valueOf(accessVector));
        String authentication = (String) cvssV2.get("authentication");
        cvss.setAuthentication(CVSS.AuthenticationValues.valueOf(authentication));
        String availabilityImpact = (String) cvssV2.get("availabilityImpact");
        cvss.setAvailabilityImpact(CVSS.ImpactValues.valueOf(availabilityImpact));
        String confidentialityImpact = (String) cvssV2.get("confidentialityImpact");
        cvss.setConfidentialityImpact(CVSS.ImpactValues.valueOf(confidentialityImpact));
        String integrityImpact = (String) cvssV2.get("integrityImpact");
        cvss.setIntegrityImpact(CVSS.ImpactValues.valueOf(integrityImpact));
        Double baseScore = (Double) cvssV2.get("baseScore");
        cvss.setScore(baseScore);
        return cvss;
    }

    private Database getDatabaseConnection() {
        Database db = null;
        String databasePath = "/home/amirshk/AwearnessProject/awearness-server/configuration-files/testDB.db";
        System.out.println("Loading database " + databasePath);
        File databaseFile = new File(databasePath);
        if (databaseFile.exists()) {
            try {
                db = new Database(databaseFile.getAbsolutePath());
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("No database found");
        }
        return db;
    }

    public ArrayList<CPE> ParsaConfigurationData(JSONObject impactData) {
        JSONArray nodes = (JSONArray) impactData.get("nodes");
        ArrayList<CPE> cpeList = new ArrayList<>();
        for (int i = 0; i < nodes.size(); i++) {
            JSONObject node = (JSONObject) nodes.get(i);
            String operator = (String) node.get("operator");
            JSONArray cpe_match;
            if ("AND".equals(operator)) {
                JSONArray children = (JSONArray) node.get("children");
                for (int z = 0; z < children.size(); z++) {
                    JSONObject child = (JSONObject) children.get(z);
                    cpe_match = (JSONArray) child.get("cpe_match");
                    cpeList.addAll(getCVEData(cpe_match));
                }
            } else {
                cpe_match = (JSONArray) node.get("cpe_match");
                cpeList.addAll(getCVEData(cpe_match));
            }

        }
        return cpeList;
    }

    private ArrayList<CPE> getCVEData(JSONArray cpe_match) {
        ArrayList<CPE> cpelist = new ArrayList<>();
        for (int j = 0; j < cpe_match.size(); j++) {
            JSONObject cpeJson = (JSONObject) cpe_match.get(j);
            boolean vulnerable = (boolean) cpeJson.get("vulnerable");
            String cpe23Uri = (String) cpeJson.get("cpe23Uri");
            String cpeDate = cpe23Uri.split("cpe:2.3:")[1].split(":\\*")[0];
            String cpeValue = "cpe:/" + cpeDate.substring(0, 1) + ":" + cpeDate.substring(2, cpeDate.length());
            if (vulnerable) {
                CPE cpe = new CPE(cpeValue);
                cpelist.add(cpe);
            }
        }
        return cpelist;
    }

}
